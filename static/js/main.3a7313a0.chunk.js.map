{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","originalDecklist","setOriginalDecklist","favoredCards","setFavoredCards","convertedDecklist","setConvertedDecklist","expanded","setExpanded","useEffect","stored","localStorage","getItem","handleChangePanel","panel","isExpanded","Grid","container","spacing","item","xs","ExpansionPanel","onChange","event","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","TextField","fullWidth","multiline","rowsMax","value","target","variant","label","Button","color","onClick","favoredHash","split","reduce","result","line","spaced","trim","setNumber","length","setName","cardName","slice","join","converted","map","parseInt","cardCount","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a7313a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  const [originalDecklist, setOriginalDecklist] = useState('');\n  const [favoredCards, setFavoredCards] = useState('');\n  const [convertedDecklist, setConvertedDecklist] = useState('');\n  const [expanded, setExpanded] = useState('original');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('favoredCards');\n    if (stored) {\n      setFavoredCards(stored);\n    }\n  }, []);\n\n  const handleChangeOriginalDecklist = (\n    event: React.FormEvent<EventTarget>\n  ) => {\n    const target = event.target as HTMLInputElement;\n    setOriginalDecklist(target.value);\n  };\n\n  const handleChangeConvertedDecklist = (\n    event: React.FormEvent<EventTarget>\n  ) => {\n    const target = event.target as HTMLInputElement;\n    setConvertedDecklist(target.value);\n  };\n\n  const handleChangeFavoredCards = (event: React.FormEvent<EventTarget>) => {\n    const target = event.target as HTMLInputElement;\n    setFavoredCards(target.value);\n  };\n\n  const handleChangePanel = (panel: string, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : '');\n  };\n\n  const handleClickConvert = () => {\n    interface Card {\n      cardName: string;\n      setName: string;\n      setNumber: string;\n    }\n    interface CardHash {\n      [index: string]: Card;\n    }\n    const favoredHash = favoredCards\n      .split(/[\\n\\r]/g)\n      .reduce<CardHash>((result, line) => {\n        const spaced = line.trim().split(' ');\n        const setNumber = spaced[spaced.length - 1];\n        const setName = spaced[spaced.length - 2];\n        const cardName = spaced.slice(0, spaced.length - 2).join(' ');\n        result[cardName] = {\n          cardName,\n          setName,\n          setNumber\n        };\n        return result;\n      }, {});\n    const converted = originalDecklist\n      .split(/[\\n\\r]/g)\n      .map(line => {\n        if (line.length > 0 && parseInt(line[0], 10)) {\n          const spaced = line.trim().split(' ');\n          const cardCount = spaced[0];\n          const cardName = spaced.slice(1, spaced.length - 2).join(' ');\n          if (favoredHash[cardName]) {\n            return `${cardCount} ${cardName} ${favoredHash[cardName].setName} ${favoredHash[cardName].setNumber}`;\n          } else {\n            return line;\n          }\n        } else {\n          return line;\n        }\n      })\n      .join('\\n');\n    setConvertedDecklist(converted);\n    setExpanded('converted');\n    localStorage.setItem('favoredCards', favoredCards);\n  };\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <ExpansionPanel\n            expanded={expanded === 'original'}\n            onChange={(event, isExpanded) =>\n              handleChangePanel('original', isExpanded)\n            }\n          >\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography>Original</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <TextField\n                fullWidth\n                multiline\n                rowsMax=\"80\"\n                value={originalDecklist}\n                onChange={handleChangeOriginalDecklist}\n                variant=\"outlined\"\n              />\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n          <ExpansionPanel\n            expanded={expanded === 'converted'}\n            onChange={(event, isExpanded) =>\n              handleChangePanel('converted', isExpanded)\n            }\n          >\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography>Converted</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <TextField\n                fullWidth\n                multiline\n                rowsMax=\"80\"\n                value={convertedDecklist}\n                onChange={handleChangeConvertedDecklist}\n                variant=\"outlined\"\n              />\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Favored Cards\"\n                multiline\n                rowsMax=\"80\"\n                value={favoredCards}\n                onChange={handleChangeFavoredCards}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={handleClickConvert}\n              >\n                Convert\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}